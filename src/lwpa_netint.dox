Whoa, this isn't a real source file! What's going on here? Well, the sources
for this module are platform-specific, so the functions are documented here to
avoid repeating documentation in each source file.

/*! \brief Get the number of network interfaces present on the system.
 *  \return Number of interfaces present. */
size_t netint_get_num_interfaces();

/*! \brief Enumerate the network interfaces on the system.
 *  \param[out] netint_arr Array of network interface description structs to
 *                         fill in with interface info.
 *  \param[in] netint_arr_size Size of the netint array.
 *  \return Number of network interfaces that were enumerated, up to a maximum
 *          of netint_arr_size, or 0 if there are no interfaces present or an
 *          error occurred.
 */
size_t netint_get_interfaces(LwpaNetintInfo *netint_arr,
                             size_t netint_arr_size);

/*! \brief Get information about the default network interface.
 *
 *  Note: If the network interfaces have already been enumerated with
 *  netint_get_interfaces(), it is more efficient to inspect the is_default
 *  flag of each interface in that existing array.
 *
 *  \param[out] netint Pointer to network interface description struct to fill
 *                     with the information about the default interface.
 *  \return true (netint was filled in) or false (error occurred).
 */
bool netint_get_default_interface(LwpaNetintInfo *netint);

/*! \brief Get the network interface that the system will choose when routing
 *         an IP packet to the specified destination.
 *
 *  \param[in] dest IP address of the destination.
 *  \param[in] netint_arr Array of network interface description structs
 *                        previously populated using netint_get_interfaces().
 *  \param[in] netint_arr_size Size of the netint array.
 *  \return Pointer to info struct for interface that will be chosen for this
 *          destination. This will be a pointer to an element in the
 *          netint_arr, or NULL if the route could not be resolved (this will
 *          only occur if there is no default interface marked in the array).
 */
const LwpaNetintInfo * netint_get_iface_for_dest(const LwpaIpAddr *dest,
                                                 const LwpaNetintInfo *netint_arr,
                                                 size_t netint_arr_size);

/*! \brief Register a callback function to be called when a network interface
 *         on the system has changed.
 *
 *  On some systems, this will spawn a thread to check for network changes.
 *  Additional calls will add to the list of functions called on a network
 *  change, up to a platform-specific maximum.
 *
 *  \param[in] fn Function to call when a network interface changes.
 *  \param[in] context Application data to pass to the callback function.
 *  \return A handle that can be used to unregister the function later on
 *          success, or -1 if an error occurred or too many functions were
 *          registered already.
 */
int netint_register_change_cb(netint_change_notification fn, void *context);

/*! \brief Unregister a network change callback.
 *
 *  Pass the value returned from netint_register_change_cb() to this function
 *  to unregister the callback. That callback will no longer be called on
 *  network change.
 *
 *  \param[in] handle Handle for callback to unregister.
 */
void netint_unregister_change_cb(int handle);
